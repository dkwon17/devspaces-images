#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
    // NUM_DAYS
    // LMIIT
    // DRY_RUN
    // DEBUG

def MIDSTM_BRANCH = 'devspaces-3-rhel-9'
def errorOccurred = false
def String nodeLabel = 'x86_64-rhel8'  // ppc64le-rhel8 disabled with cffi error; s390x-rhel8-perm disabled as rust compilation sometimes fails
timeout(120) {
    node(nodeLabel){
        try {
            stage ("Check for updated images") {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                    def util = load "${WORKSPACE}/util2.groovy"
                    cleanWs()
                    withCredentials([string(credentialsId: 'jira-jiralint-token', variable: 'JIRA_TOKEN'), string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                        util.cloneRepo("https://github.com/redhat-developer/devspaces.git", "ds", MIDSTM_BRANCH, false)
                        GHIRA_OPTIONS = ''
                        if (DRY_RUN.equals("true")) {
                            GHIRA_OPTIONS += " --dryrun"
                        }
                        if (DEBUG.equals("true")) {
                            GHIRA_OPTIONS += " --debug"
                        }
                        if (!NUM_DAYS.equals("")) {
                            GHIRA_OPTIONS += " --days " + NUM_DAYS
                        }
                        if (!LIMIT.equals("")) {
                            GHIRA_OPTIONS += " --limit " + LIMIT
                        }
                        print "Using GHIRA_OPTIONS = " + GHIRA_OPTIONS
                        sh '''#!/bin/bash -xe
cd ${WORKSPACE}/ds/product/ghira
pyenv virtualenv ghira -f
pyenv local ghira
pip install -r requirements.txt
export JIRA_EMAIL="jiralint-codeready@redhat.com"
export JIRA_TOKEN="''' + "${JIRA_TOKEN}" + '''"
export GITHUB_TOKEN="''' + "${GITHUB_TOKEN}" + '''"
python ghira ''' + "${GHIRA_OPTIONS}" + '''
                        '''
                    } // with tokens
                } // wrap
                cleanWs(
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true,
                    cleanWhenNotBuilt: false,
                    cleanWhenFailure: true,
                    cleanWhenAborted: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true
                )
            } // stage
        } catch (e) {
            if (errorOccurred) {
                util.notifyBuildFailed()
                return
            }
            throw e
        } // try-catch
    } // node
} // timeout

